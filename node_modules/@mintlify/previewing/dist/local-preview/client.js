var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import fse from 'fs-extra';
import got from 'got';
import isOnline from 'is-online';
import { pipeline } from 'node:stream/promises';
import tar from 'tar';
import { DOT_MINTLIFY, VERSION_PATH, MINT_PATH, TAR_PATH, TARGET_MINT_VERSION_URL, GET_TAR_URL, } from '../constants.js';
export const getTargetMintVersion = (logger) => __awaiter(void 0, void 0, void 0, function* () {
    const hasInternet = yield isOnline();
    if (!hasInternet) {
        return undefined;
    }
    try {
        const response = yield got(TARGET_MINT_VERSION_URL);
        return response.body;
    }
    catch (error) {
        logger.text = `Failed to fetch the latest Mintlify version: ${error instanceof Error ? error.message : 'Unknown error'}`;
        return undefined;
    }
});
export const fallbackMintClient = (logger, versionString) => __awaiter(void 0, void 0, void 0, function* () {
    logger.text = `Using version: ${versionString}`;
    const oldTarUrl = GET_TAR_URL(versionString);
    try {
        yield pipeline(got.stream(oldTarUrl), fse.createWriteStream(TAR_PATH));
    }
    catch (error) {
        logger.fail(`Failed to download Mintlify framework version ${versionString}, ${error}`);
        process.exit(1);
    }
    try {
        yield extractMintClient(logger);
    }
    catch (error) {
        logger.fail(`Failed to extract Mintlify framework version ${versionString}, ${error}`);
        process.exit(1);
    }
});
export const extractMintClient = (logger) => __awaiter(void 0, void 0, void 0, function* () {
    logger.text = 'Extracting Mintlify framework...';
    tar.x({
        sync: true,
        file: TAR_PATH,
        cwd: DOT_MINTLIFY,
        onwarn: (_code, message, _data) => {
            throw new Error(message);
        },
    });
});
export const downloadTargetMint = (logger, targetMintVersion, versionString, clientVersion) => __awaiter(void 0, void 0, void 0, function* () {
    fse.emptyDirSync(MINT_PATH);
    logger.text = 'Downloading Mintlify framework...';
    const tarUrl = clientVersion ? GET_TAR_URL(clientVersion) : GET_TAR_URL(targetMintVersion);
    let currentVersion = clientVersion || targetMintVersion;
    try {
        yield pipeline(got.stream(tarUrl), fse.createWriteStream(TAR_PATH));
    }
    catch (error) {
        if (versionString) {
            currentVersion = versionString;
            yield fallbackMintClient(logger, versionString);
        }
        else {
            process.exit(1);
        }
    }
    try {
        yield extractMintClient(logger);
    }
    catch (error) {
        if (versionString && currentVersion !== versionString) {
            currentVersion = versionString;
            yield fallbackMintClient(logger, versionString);
        }
        else {
            process.exit(1);
        }
    }
    fse.removeSync(TAR_PATH);
    fse.writeFileSync(VERSION_PATH, targetMintVersion);
});

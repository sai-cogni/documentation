var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { findAndRemoveImports, stringifyTree, topologicalSort, hasImports, optionallyAddLeadingSlash, optionallyRemoveLeadingSlash, } from '@mintlify/common';
import { outputFile } from 'fs-extra';
import { join } from 'path';
import { NEXT_PUBLIC_PATH } from '../../constants.js';
import { getOriginalSnippets } from './getSnippets.js';
import { resolveAllImports } from './resolveAllImports.js';
const findAllDependents = (initialFileWithSlash, allSnippets, processedDataCache) => __awaiter(void 0, void 0, void 0, function* () {
    const affected = new Set([initialFileWithSlash]);
    const queue = [initialFileWithSlash];
    while (queue.length > 0) {
        const currentSourceFile = queue.shift();
        for (const snippet of allSnippets) {
            const potentialDependentFile = optionallyAddLeadingSlash(snippet.filename);
            if (potentialDependentFile === currentSourceFile)
                continue;
            let processedData = processedDataCache.get(potentialDependentFile);
            if (processedData == null) {
                const clonedTree = structuredClone(snippet.tree);
                processedData = yield findAndRemoveImports(clonedTree);
                processedDataCache.set(potentialDependentFile, processedData);
            }
            if (processedData.importMap[currentSourceFile]) {
                if (!affected.has(potentialDependentFile)) {
                    affected.add(potentialDependentFile);
                    queue.push(potentialDependentFile);
                }
            }
        }
    }
    return affected;
});
export const generateDependentSnippets = (changedFilename, newImportData) => __awaiter(void 0, void 0, void 0, function* () {
    const processedDataCache = new Map();
    const allOriginalSnippets = yield getOriginalSnippets();
    const updatedSnippetFileKey = optionallyAddLeadingSlash(changedFilename);
    const affectedSnippets = yield findAllDependents(updatedSnippetFileKey, allOriginalSnippets, processedDataCache);
    const snippetPromises = Array.from(affectedSnippets).map((filename) => __awaiter(void 0, void 0, void 0, function* () {
        const cachedData = processedDataCache.get(filename);
        if (cachedData)
            return Object.assign({ filename }, cachedData);
        const originalSnippet = allOriginalSnippets.find((s) => optionallyAddLeadingSlash(s.filename) === filename);
        if (!originalSnippet)
            return null;
        const processed = yield findAndRemoveImports(structuredClone(originalSnippet.tree));
        processedDataCache.set(filename, processed);
        return Object.assign({ filename }, processed);
    }));
    const snippets = (yield Promise.all(snippetPromises)).filter((item) => item != null);
    const idx = snippets.findIndex((item) => item.filename === updatedSnippetFileKey);
    if (idx !== -1) {
        snippets[idx] = Object.assign(Object.assign({}, newImportData), { filename: updatedSnippetFileKey });
    }
    else {
        snippets.push(Object.assign(Object.assign({}, newImportData), { filename: updatedSnippetFileKey }));
    }
    const graph = {};
    snippets.forEach((item) => {
        graph[item.filename] = Object.keys(item.importMap).map((dep) => optionallyAddLeadingSlash(dep));
    });
    const sortedSnippets = topologicalSort(graph).reverse();
    const snippetsMap = new Map(snippets.map((item) => [item.filename, item]));
    const orderedSnippets = sortedSnippets
        .map((filename) => snippetsMap.get(filename))
        .filter((item) => item != null);
    const processedSnippets = [];
    for (const currentSnippet of orderedSnippets) {
        let processedTree = currentSnippet.tree;
        if (currentSnippet.filename !== updatedSnippetFileKey && hasImports(currentSnippet)) {
            processedTree = yield resolveAllImports(currentSnippet);
        }
        const targetFilename = optionallyRemoveLeadingSlash(currentSnippet.filename);
        const targetPath = join(NEXT_PUBLIC_PATH, targetFilename);
        yield outputFile(targetPath, stringifyTree(processedTree), { flag: 'w' });
        processedSnippets.push(targetFilename);
    }
    return processedSnippets;
});

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { categorizeFilePaths, createPage, generateDecoratedDocsNavigationFromPages, } from '@mintlify/prebuild';
import { promises as _promises } from 'fs';
import { join } from 'path';
import { CMD_EXEC_PATH } from '../../constants.js';
const { readFile } = _promises;
const createFilenamePageMetadataMap = (_a) => __awaiter(void 0, [_a], void 0, function* ({ contentDirectoryPath, contentFilenames, openApiFiles, asyncApiFiles, pagesAcc = {}, }) {
    const contentPromises = [];
    contentFilenames.forEach((filename) => {
        contentPromises.push((() => __awaiter(void 0, void 0, void 0, function* () {
            const sourcePath = join(contentDirectoryPath, filename);
            const contentStr = (yield readFile(sourcePath)).toString();
            const { slug, pageMetadata } = yield createPage(filename, contentStr, contentDirectoryPath, openApiFiles, asyncApiFiles, true);
            pagesAcc = Object.assign(Object.assign({}, pagesAcc), { [slug]: pageMetadata });
        }))());
    });
    yield Promise.all(contentPromises);
    return pagesAcc;
});
export const generateNav = (pagesAcc, docsConfig) => __awaiter(void 0, void 0, void 0, function* () {
    const { contentFilenames, openApiFiles, asyncApiFiles } = yield categorizeFilePaths(CMD_EXEC_PATH);
    const filenamePageMetadataMap = yield createFilenamePageMetadataMap({
        contentDirectoryPath: CMD_EXEC_PATH,
        contentFilenames,
        openApiFiles,
        asyncApiFiles,
        pagesAcc,
    });
    const generatedDocsNav = generateDecoratedDocsNavigationFromPages(filenamePageMetadataMap, docsConfig.navigation);
    return generatedDocsNav;
});

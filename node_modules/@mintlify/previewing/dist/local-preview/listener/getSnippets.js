var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { optionallyAddLeadingSlash } from '@mintlify/common';
import { getFileListSync, preparseMdxTree } from '@mintlify/prebuild';
import { promises as _promises } from 'fs';
import { join } from 'path';
import { CMD_EXEC_PATH, NEXT_PUBLIC_PATH } from '../../constants.js';
const { readFile } = _promises;
const getSnippetBase = (BASE_DIR) => __awaiter(void 0, void 0, void 0, function* () {
    const snippetFilenames = getFileListSync(BASE_DIR).filter((file) => file.endsWith('.mdx') && file.startsWith('snippets/'));
    const promises = snippetFilenames.map((snippetFilename) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const tree = yield preparseMdxTree((yield readFile(join(BASE_DIR, snippetFilename))).toString(), BASE_DIR, join(BASE_DIR, snippetFilename));
            return {
                filename: optionallyAddLeadingSlash(snippetFilename),
                tree,
            };
        }
        catch (err) {
            console.warn(`Error reading snippet file ${snippetFilename}`);
            return;
        }
    }));
    return (yield Promise.all(promises)).filter(Boolean);
});
export const getProcessedSnippets = () => getSnippetBase(NEXT_PUBLIC_PATH);
export const getOriginalSnippets = () => getSnippetBase(CMD_EXEC_PATH);
